/**
 * Demonstra√ß√£o das fun√ß√µes de contrato em JavaScript puro
 * Para validar que a l√≥gica est√° correta
 */

// Simula√ß√£o das fun√ß√µes principais em JavaScript
function calculateAnnualSalary(originalSalary, targetYear) {
  if (targetYear < 0) {
    throw new Error('Ano alvo n√£o pode ser negativo');
  }

  const annualIncreaseRate = 1.15;
  const calculatedSalary = originalSalary * Math.pow(annualIncreaseRate, targetYear);
  return Math.round(calculatedSalary * 100) / 100;
}

function calculateDeadMoney(originalSalary, originalYears, cutYear, isPracticeSquad = false) {
  const currentYearSalary = calculateAnnualSalary(originalSalary, cutYear);
  const yearsRemaining = originalYears - cutYear - 1;

  let currentSeasonAmount;
  let nextSeasonAmount;

  if (isPracticeSquad) {
    currentSeasonAmount = currentYearSalary * 0.25;
    nextSeasonAmount = 0;
  } else {
    currentSeasonAmount = currentYearSalary;

    let remainingYearsPenalty = 0;
    for (let year = cutYear + 1; year < originalYears; year++) {
      const yearSalary = calculateAnnualSalary(originalSalary, year);
      remainingYearsPenalty += yearSalary * 0.25;
    }
    nextSeasonAmount = remainingYearsPenalty;
  }

  const totalAmount = currentSeasonAmount + nextSeasonAmount;

  return {
    totalAmount: Math.round(totalAmount * 100) / 100,
    currentSeasonAmount: Math.round(currentSeasonAmount * 100) / 100,
    nextSeasonAmount: Math.round(nextSeasonAmount * 100) / 100,
    breakdown: {
      currentYearSalary,
      remainingYears: yearsRemaining,
    },
  };
}

function calculateFranchiseTagValue(currentSalary, positionAverage) {
  const salaryWith15Percent = currentSalary * 1.15;
  const finalTagValue = Math.max(salaryWith15Percent, positionAverage);

  return {
    currentSalary,
    salaryWith15Percent: Math.round(salaryWith15Percent * 100) / 100,
    positionAverage,
    finalTagValue: Math.round(finalTagValue * 100) / 100,
  };
}

// Demonstra√ß√£o das fun√ß√µes
console.log('üß™ DEMONSTRA√á√ÉO DAS FUN√á√ïES DE CONTRATO');
console.log('======================================');

// Exemplo: Josh Allen, $30M por 4 anos
const playerName = 'Josh Allen';
const originalSalary = 30.0;
const originalYears = 4;

console.log(`\nüìä Jogador: ${playerName}`);
console.log(`Contrato: $${originalSalary}M por ${originalYears} anos`);

// Teste 1: Proje√ß√£o salarial
console.log('\nüí∞ Proje√ß√£o Salarial (aumento anual de 15%):');
for (let year = 0; year < originalYears; year++) {
  const salary = calculateAnnualSalary(originalSalary, year);
  console.log(`  Ano ${year + 1}: $${salary}M`);
}

// Teste 2: Dead Money - Corte no ano 2
console.log('\nüíÄ Dead Money - Corte no Ano 2:');
const deadMoney = calculateDeadMoney(originalSalary, originalYears, 1, false);
console.log(`  Sal√°rio do ano atual: $${deadMoney.breakdown.currentYearSalary}M`);
console.log(`  Anos restantes: ${deadMoney.breakdown.remainingYears}`);
console.log(`  Dead money temporada atual: $${deadMoney.currentSeasonAmount}M`);
console.log(`  Dead money pr√≥xima temporada: $${deadMoney.nextSeasonAmount}M`);
console.log(`  Total de dead money: $${deadMoney.totalAmount}M`);

// Teste 3: Dead Money - Practice Squad
console.log('\nüíÄ Dead Money - Practice Squad (Ano 2):');
const deadMoneyPS = calculateDeadMoney(originalSalary, originalYears, 1, true);
console.log(`  Dead money temporada atual: $${deadMoneyPS.currentSeasonAmount}M`);
console.log(`  Dead money pr√≥xima temporada: $${deadMoneyPS.nextSeasonAmount}M`);
console.log(`  Total: $${deadMoneyPS.totalAmount}M`);

// Teste 4: Franchise Tag
console.log('\nüè∑Ô∏è Franchise Tag - QB (ano 4):');
const year3Salary = calculateAnnualSalary(originalSalary, 3); // Sal√°rio no 4¬∫ ano
const qbPositionAverage = 25.0; // M√©dia dos top 10 QBs
const franchiseTag = calculateFranchiseTagValue(year3Salary, qbPositionAverage);
console.log(`  Sal√°rio atual: $${franchiseTag.currentSalary}M`);
console.log(`  Sal√°rio + 15%: $${franchiseTag.salaryWith15Percent}M`);
console.log(`  M√©dia top 10 QB: $${franchiseTag.positionAverage}M`);
console.log(`  Valor da tag: $${franchiseTag.finalTagValue}M`);
console.log(
  `  Crit√©rio: ${franchiseTag.finalTagValue === franchiseTag.salaryWith15Percent ? 'Sal√°rio + 15%' : 'M√©dia da posi√ß√£o'}`,
);

// Teste 5: Valida√ß√£o de Cap Space
console.log('\nüí∏ Valida√ß√£o de Salary Cap:');
const teamCap = 45.5; // Cap dispon√≠vel do time
const operationCost = 20.0; // Custo da opera√ß√£o
const hasSpace = teamCap >= operationCost;
const shortfall = hasSpace ? 0 : operationCost - teamCap;

console.log(`  Cap dispon√≠vel: $${teamCap}M`);
console.log(`  Custo da opera√ß√£o: $${operationCost}M`);
console.log(`  Tem espa√ßo: ${hasSpace}`);
if (!hasSpace) {
  console.log(`  D√©ficit: $${shortfall}M`);
}

// Teste 6: Proje√ß√£o de Cap para pr√≥ximos anos
console.log('\nüìä Proje√ß√£o de Cap (pr√≥ximos 3 anos):');
const leagueCap = 279.0;
const currentDeadMoney = 8.2;
const nextSeasonDeadMoney = 3.1;

for (let i = 0; i < 3; i++) {
  const year = 2024 + i;
  const contractYear = i;
  const salary = calculateAnnualSalary(originalSalary, contractYear);
  const deadMoney = i === 0 ? currentDeadMoney : i === 1 ? nextSeasonDeadMoney : 0;
  const availableCap = leagueCap - salary - deadMoney;

  console.log(
    `  ${year}: Sal√°rio $${salary}M + Dead Money $${deadMoney}M = Cap dispon√≠vel $${availableCap}M`,
  );
}

console.log('\n‚úÖ DEMONSTRA√á√ÉO CONCLU√çDA!');
console.log('\nüìã FUNCIONALIDADES VALIDADAS:');
console.log('  ‚úì C√°lculo de sal√°rio anual com aumento de 15%');
console.log('  ‚úì C√°lculo de dead money (regular e practice squad)');
console.log('  ‚úì C√°lculo do valor da franchise tag');
console.log('  ‚úì Valida√ß√£o de espa√ßo no salary cap');
console.log('  ‚úì Proje√ß√£o de cap para anos futuros');

console.log('\nüéØ REGRAS DA LIGA IMPLEMENTADAS:');
console.log('  ‚Ä¢ Aumento anual autom√°tico de 15% nos contratos');
console.log('  ‚Ä¢ Dead money: 100% do sal√°rio atual + 25% dos anos restantes');
console.log('  ‚Ä¢ Practice squad: apenas 25% do sal√°rio atual como dead money');
console.log('  ‚Ä¢ Franchise tag: maior entre sal√°rio+15% ou m√©dia top 10 da posi√ß√£o');
console.log('  ‚Ä¢ Valida√ß√µes de salary cap e opera√ß√µes financeiras');

console.log('\nüöÄ PR√ìXIMOS PASSOS:');
console.log('  1. Integrar com a interface React/Next.js');
console.log('  2. Conectar com banco de dados para persist√™ncia');
console.log('  3. Implementar integra√ß√£o com Sleeper API');
console.log('  4. Adicionar testes automatizados');
console.log('  5. Criar dashboard para visualiza√ß√£o dos dados');
