/**
 * Script de teste para verificar se o perfil ADMIN foi removido completamente
 * 
 * Este script verifica:
 * 1. Se n√£o h√° mais usu√°rios com role ADMIN no banco
 * 2. Se todos os usu√°rios antigos ADMIN foram migrados para COMMISSIONER
 * 3. Se as enumera√ß√µes n√£o cont√™m mais ADMIN
 */

import { PrismaClient } from '@prisma/client';
import { UserRole } from '../src/types/database';

const prisma = new PrismaClient();

async function testAdminRemoval() {
  console.log('üîç Testando remo√ß√£o do perfil ADMIN...');

  try {
    // 1. Verificar se n√£o h√° usu√°rios ADMIN no banco
    const adminUsers = await prisma.user.findMany({
      where: { role: 'ADMIN' as any }
    });

    if (adminUsers.length > 0) {
      console.error('‚ùå ERRO: Ainda existem usu√°rios com perfil ADMIN:', adminUsers);
      return false;
    }
    console.log('‚úÖ Nenhum usu√°rio com perfil ADMIN encontrado');

    // 2. Verificar se o enum UserRole n√£o cont√©m ADMIN
    const validRoles = Object.values(UserRole);
    if (validRoles.includes('ADMIN' as any)) {
      console.error('‚ùå ERRO: Enum UserRole ainda cont√©m ADMIN:', validRoles);
      return false;
    }
    console.log('‚úÖ Enum UserRole n√£o cont√©m mais ADMIN:', validRoles);

    // 3. Listar todos os usu√°rios e seus perfis
    const allUsers = await prisma.user.findMany({
      select: {
        id: true,
        name: true,
        email: true,
        role: true
      }
    });

    console.log('üìã Usu√°rios no sistema:');
    allUsers.forEach(user => {
      console.log(`  - ${user.name} (${user.email}): ${user.role}`);
    });

    // 4. Verificar se h√° comiss√°rios suficientes
    const commissioners = allUsers.filter(user => user.role === 'COMMISSIONER');
    if (commissioners.length === 0) {
      console.warn('‚ö†Ô∏è AVISO: Nenhum comiss√°rio encontrado no sistema');
    } else {
      console.log(`‚úÖ ${commissioners.length} comiss√°rio(s) encontrado(s)`);
    }

    console.log('üéâ Teste de remo√ß√£o do perfil ADMIN conclu√≠do com sucesso!');
    return true;

  } catch (error) {
    console.error('‚ùå Erro durante o teste:', error);
    return false;
  } finally {
    await prisma.$disconnect();
  }
}

// Executar o teste
if (require.main === module) {
  testAdminRemoval()
    .then(success => {
      process.exit(success ? 0 : 1);
    })
    .catch(error => {
      console.error('‚ùå Falha no teste:', error);
      process.exit(1);
    });
}

export { testAdminRemoval };