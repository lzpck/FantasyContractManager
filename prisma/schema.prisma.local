// This is your Prisma schema file for LOCAL DEVELOPMENT with SQLite
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

// ============================================================================
// AUTENTICAÇÃO E USUÁRIOS
// ============================================================================

/**
 * Modelo de usuário com perfis e permissões
 */
model User {
  id            String    @id @default(cuid())
  name          String?
  login         String?   @unique // Nome de usuário único
  email         String    @unique
  emailVerified String?
  image         String?
  password      String? // Para autenticação local

  // Perfis e permissões
  role     UserRole @default(USER)
  isActive Boolean  @default(true)

  // Associação com time (um usuário pode ter apenas um time)
  teamId   String?  @unique // Relacionamento único com time

  // Timestamps (ISO 8601 format)
  createdAt String @default("")
  updatedAt String @default("")

  // Relacionamentos NextAuth
  accounts Account[]
  sessions Session[]

  // Relacionamentos da aplicação
  team    Team?    @relation("UserTeam", fields: [teamId], references: [id])
  teams   Team[]   @relation("TeamOwner") // Manter compatibilidade com relacionamento existente
  leagues League[] @relation("LeagueCommissioner")
  leagueUsers LeagueUser[] // Associações como membro de ligas

  @@map("users")
}

enum UserRole {
  USER
  ADMIN
  COMMISSIONER
}

// ============================================================================
// NEXTAUTH MODELS
// ============================================================================

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("accounts")
}

model Session {
  id           String @id @default(cuid())
  sessionToken String @unique
  userId       String
  expires      String // ISO 8601 format
  user         User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("sessions")
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    String // ISO 8601 format

  @@unique([identifier, token])
  @@map("verificationtokens")
}

// ============================================================================
// LIGAS E TIMES
// ============================================================================

/**
 * Modelo de liga
 */
model League {
  id          String @id @default(cuid())
  name        String
  description String?
  
  // Configurações da liga
  salaryCap      Float   @default(279000000) // Teto salarial em dólares
  maxTeams       Int     @default(12)
  franchiseTags  Int     @default(1) // Número de franchise tags por temporada
  
  // Configurações de dead money
  deadMoneyPercentage Float @default(0.25) // 25% para anos restantes
  practiceSquadDeadMoneyPercentage Float @default(0.25) // 25% apenas no ano corrente
  
  // Configurações do rookie draft
  rookieDraftRounds Int @default(3)
  fourthYearOptionRounds Int @default(1) // Apenas 1ª rodada tem opção de 4º ano
  
  // Configurações de aumento salarial
  salaryIncreasePercentage Float @default(0.15) // 15% ao ano
  
  // Integração Sleeper
  sleeperLeagueId String?
  
  // Status e configurações
  isActive Boolean @default(true)
  season   Int     @default(2024)
  
  // Timestamps
  createdAt String @default("")
  updatedAt String @default("")
  
  // Relacionamentos
  commissionerId String
  commissioner   User   @relation("LeagueCommissioner", fields: [commissionerId], references: [id])
  
  teams       Team[]
  players     Player[]
  contracts   Contract[]
  leagueUsers LeagueUser[]
  
  @@map("leagues")
}

/**
 * Associação entre usuários e ligas (many-to-many)
 */
model LeagueUser {
  id       String @id @default(cuid())
  userId   String
  leagueId String
  
  // Papel do usuário na liga
  role UserLeagueRole @default(MEMBER)
  
  // Status
  isActive Boolean @default(true)
  
  // Timestamps
  joinedAt String @default("")
  
  // Relacionamentos
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  league League @relation(fields: [leagueId], references: [id], onDelete: Cascade)
  
  @@unique([userId, leagueId])
  @@map("league_users")
}

enum UserLeagueRole {
  MEMBER
  MODERATOR
  COMMISSIONER
}

/**
 * Modelo de time
 */
model Team {
  id          String  @id @default(cuid())
  name        String
  abbreviation String? // Ex: "KC", "NE", etc.
  
  // Integração Sleeper
  sleeperTeamId String?
  sleeperRosterId String?
  
  // Relacionamentos
  leagueId String
  league   League @relation(fields: [leagueId], references: [id], onDelete: Cascade)
  
  ownerId String?
  owner   User?  @relation("TeamOwner", fields: [ownerId], references: [id])
  
  // Relacionamento único com usuário
  user User? @relation("UserTeam")
  
  // Timestamps
  createdAt String @default("")
  updatedAt String @default("")
  
  // Relacionamentos
  contracts Contract[]
  
  @@map("teams")
}

// ============================================================================
// JOGADORES E CONTRATOS
// ============================================================================

/**
 * Modelo de jogador
 */
model Player {
  id       String @id @default(cuid())
  name     String
  position String // QB, RB, WR, TE, K, DEF
  
  // Integração Sleeper
  sleeperPlayerId String? @unique
  
  // Informações do jogador
  team     String? // Time da NFL
  isActive Boolean @default(true)
  
  // Relacionamentos
  leagueId String
  league   League @relation(fields: [leagueId], references: [id], onDelete: Cascade)
  
  contracts Contract[]
  
  // Timestamps
  createdAt String @default("")
  updatedAt String @default("")
  
  @@map("players")
}

/**
 * Modelo de contrato
 */
model Contract {
  id String @id @default(cuid())
  
  // Informações básicas do contrato
  salary        Float // Salário em dólares
  yearsRemaining Int   // Anos restantes no contrato
  originalYears  Int   // Duração original do contrato
  originalSalary Float // Salário original do contrato
  
  // Tipo de contrato
  contractType ContractType @default(AUCTION)
  
  // Status do contrato
  isActive Boolean @default(true)
  
  // Extensão de contrato
  hasBeenExtended Boolean @default(false)
  extensionYear   Int?    // Ano em que foi estendido
  
  // Franchise tag
  hasBeenTagged Boolean @default(false)
  tagYear       Int?    // Ano em que foi tagueado
  
  // Rookie contract específico
  isRookieContract    Boolean @default(false)
  draftRound         Int?    // Rodada do draft (1-3)
  hasFourthYearOption Boolean @default(false)
  fourthYearActivated Boolean @default(false)
  
  // Dead money
  deadMoney       Float   @default(0)
  deadMoneyYear   Int?    // Ano do dead money
  isPracticeSquad Boolean @default(false)
  
  // Timestamps
  createdAt String @default("")
  updatedAt String @default("")
  
  // Relacionamentos
  playerId String
  player   Player @relation(fields: [playerId], references: [id], onDelete: Cascade)
  
  teamId String
  team   Team   @relation(fields: [teamId], references: [id], onDelete: Cascade)
  
  leagueId String
  league   League @relation(fields: [leagueId], references: [id], onDelete: Cascade)
  
  @@map("contracts")
}

enum ContractType {
  AUCTION     // Leilão inicial
  FAAB        // Free agent acquisition budget
  ROOKIE      // Rookie draft
  EXTENSION   // Extensão de contrato
  FRANCHISE   // Franchise tag
  WAIVER      // Waiver wire
}

// ============================================================================
// CONFIGURAÇÕES E AUDITORIA
// ============================================================================

/**
 * Configurações específicas de dead money por liga
 */
model DeadMoneyConfig {
  id       String @id @default(cuid())
  leagueId String @unique
  
  // Configurações de dead money
  standardPercentage      Float @default(0.25) // 25% para cortes normais
  practiceSquadPercentage Float @default(0.25) // 25% para practice squad
  
  // Configurações de timing
  cutoffDate String? // Data limite para cortes (formato ISO 8601)
  
  // Timestamps
  createdAt String @default("")
  updatedAt String @default("")
  
  @@map("dead_money_configs")
}

/**
 * Log de auditoria para rastreamento de mudanças
 */
model AuditLog {
  id String @id @default(cuid())
  
  // Informações da ação
  action      String // CREATE, UPDATE, DELETE, etc.
  entityType  String // Contract, Player, Team, etc.
  entityId    String // ID da entidade afetada
  
  // Dados da mudança
  oldValues String? // JSON com valores antigos
  newValues String? // JSON com valores novos
  
  // Contexto
  userId    String? // Usuário que fez a mudança
  reason    String? // Motivo da mudança
  
  // Timestamp
  createdAt String @default("")
  
  @@map("audit_logs")
}