// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

// ============================================================================
// AUTENTICAÇÃO E USUÁRIOS
// ============================================================================

/**
 * Modelo de usuário com perfis e permissões
 */
model User {
  id            String    @id @default(cuid())
  name          String?
  email         String    @unique
  emailVerified DateTime?
  image         String?
  password      String?   // Para autenticação local
  
  // Perfis e permissões
  role          UserRole  @default(USER)
  isActive      Boolean   @default(true)
  
  // Timestamps
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  
  // Relacionamentos NextAuth
  accounts      Account[]
  sessions      Session[]
  
  // Relacionamentos da aplicação
  teams         Team[]
  leagues       League[]  @relation("LeagueCommissioner")
  
  @@map("users")
}

/**
 * Tipos de perfil de usuário
 */
enum UserRole {
  ADMIN        // Admin - acesso total ao sistema
  COMMISSIONER // Comissário - acesso total à liga
  USER         // Usuário - acesso básico
}

/**
 * Contas de autenticação (NextAuth)
 */
model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  @@unique([provider, providerAccountId])
  @@map("accounts")
}

/**
 * Sessões de usuário (NextAuth)
 */
model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  @@map("sessions")
}

/**
 * Tokens de verificação (NextAuth)
 */
model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime
  
  @@unique([identifier, token])
  @@map("verification_tokens")
}

// ============================================================================
// LIGAS E TIMES
// ============================================================================

/**
 * Modelo de liga
 */
model League {
  id                String      @id @default(cuid())
  name              String
  season            Int
  salaryCap         Float
  totalTeams        Int
  status            LeagueStatus @default(ACTIVE)
  sleeperLeagueId   String?
  
  // Configurações
  maxFranchiseTags           Int     @default(1)
  annualIncreasePercentage   Float   @default(15.0)
  minimumSalary             Float   @default(1.0)
  seasonTurnoverDate        String  @default("04-01")
  
  // Relacionamentos
  commissionerId    String
  commissioner      User        @relation("LeagueCommissioner", fields: [commissionerId], references: [id])
  teams             Team[]
  
  // Timestamps
  createdAt         DateTime    @default(now())
  updatedAt         DateTime    @updatedAt
  
  @@map("leagues")
}

/**
 * Status da liga
 */
enum LeagueStatus {
  ACTIVE
  OFFSEASON
  ARCHIVED
}

/**
 * Modelo de time
 */
model Team {
  id        String   @id @default(cuid())
  name      String
  
  // Integração Sleeper
  sleeperTeamId     String?
  
  // Salary Cap
  currentSalaryCap  Float   @default(0)
  currentDeadMoney  Float   @default(0)
  
  // Relacionamentos
  leagueId  String
  league    League   @relation(fields: [leagueId], references: [id], onDelete: Cascade)
  
  ownerId   String
  owner     User     @relation(fields: [ownerId], references: [id])
  
  // Timestamps
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  
  @@unique([leagueId, ownerId])
  @@map("teams")
}

/**
 * Modelo de jogador
 */
model Player {
  id                String   @id @default(cuid())
  name              String
  position          String
  team              String   // Time da NFL
  age               Int?
  
  // Integração Sleeper
  sleeperPlayerId   String   @unique
  
  // Status
  isActive          Boolean  @default(true)
  
  // Timestamps
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt
  
  @@map("players")
}
