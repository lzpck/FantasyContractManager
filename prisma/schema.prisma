generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

/// *
/// * Modelo de usuário com perfis e permissões
model User {
  id            String       @id @default(cuid())
  name          String?
  login         String?      @unique
  email         String       @unique
  emailVerified String?
  image         String?
  password      String?
  role          UserRole     @default(USER)
  isActive      Boolean      @default(true)
  teamId        String?      @unique
  createdAt     String       @default("")
  updatedAt     String       @default("")
  accounts      Account[]
  leagueUsers   LeagueUser[]
  leagues       League[]     @relation("LeagueCommissioner")
  sessions      Session[]
  teams         Team[]       @relation("TeamOwner")
  team          Team?        @relation("UserTeam", fields: [teamId], references: [id])

  @@map("users")
}

/// *
/// * Contas de autenticação (NextAuth)
model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("accounts")
}

/// *
/// * Sessões de usuário (NextAuth)
model Session {
  id           String @id @default(cuid())
  sessionToken String @unique
  userId       String
  expires      String
  user         User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("sessions")
}

/// *
/// * Tokens de verificação (NextAuth)
model VerificationToken {
  identifier String
  token      String @unique
  expires    String

  @@unique([identifier, token])
  @@map("verification_tokens")
}

/// *
/// * Modelo de liga
model League {
  id                       String       @id @default(cuid())
  name                     String
  season                   Int
  salaryCap                Float
  totalTeams               Int
  status                   LeagueStatus @default(ACTIVE)
  sleeperLeagueId          String?
  maxFranchiseTags         Int          @default(1)
  annualIncreasePercentage Float        @default(15.0)
  minimumSalary            Float        @default(1.0)
  seasonTurnoverDate       String       @default("04-01")
  deadMoneyConfig          String       @default("{\"currentSeason\":1.0,\"futureSeasons\":{\"1\":0,\"2\":0.5,\"3\":0.75,\"4\":1.0}}")
  commissionerId           String
  createdAt                String       @default("")
  updatedAt                String       @default("")
  contracts                Contract[]
  leagueUsers              LeagueUser[]
  commissioner             User         @relation("LeagueCommissioner", fields: [commissionerId], references: [id])
  teams                    Team[]

  @@map("leagues")
}

/// *
/// * Modelo para associar usuários às ligas como membros
model LeagueUser {
  id        String @id @default(cuid())
  leagueId  String
  userId    String
  role      String @default("MEMBER")
  createdAt String @default("")
  updatedAt String @default("")
  league    League @relation(fields: [leagueId], references: [id], onDelete: Cascade)
  user      User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([leagueId, userId])
  @@map("league_users")
}

/// *
/// * Modelo de time
model Team {
  id                  String       @id @default(cuid())
  name                String
  abbreviation        String?
  sleeperOwnerId      String?
  ownerDisplayName    String?
  sleeperTeamId       String?
  currentSalaryCap    Float        @default(0)
  currentDeadMoney    Float        @default(0)
  nextSeasonDeadMoney Float        @default(0)
  leagueId            String
  ownerId             String?
  createdAt           String       @default("")
  updatedAt           String       @default("")
  contracts           Contract[]
  deadMoney           DeadMoney[]
  roster              TeamRoster[]
  league              League       @relation(fields: [leagueId], references: [id], onDelete: Cascade)
  owner               User?        @relation("TeamOwner", fields: [ownerId], references: [id])
  user                User?        @relation("UserTeam")

  @@unique([leagueId, sleeperOwnerId])
  @@map("teams")
}

/// *
/// * Modelo de jogador
model Player {
  id               String       @id @default(cuid())
  name             String
  position         String
  fantasyPositions String
  team             String
  age              Int?
  sleeperPlayerId  String       @unique
  isActive         Boolean      @default(true)
  createdAt        String       @default("")
  updatedAt        String       @default("")
  contracts        Contract[]
  deadMoney        DeadMoney[]
  teamRosters      TeamRoster[]

  @@map("players")
}

/// *
/// * Modelo para associar jogadores aos rosters dos times
model TeamRoster {
  id              String @id @default(cuid())
  teamId          String
  playerId        String
  sleeperPlayerId String
  status          String @default("active")
  createdAt       String @default("")
  updatedAt       String @default("")
  player          Player @relation(fields: [playerId], references: [id], onDelete: Cascade)
  team            Team   @relation(fields: [teamId], references: [id], onDelete: Cascade)

  @@unique([teamId, playerId])
  @@index([teamId])
  @@index([sleeperPlayerId])
  @@map("team_rosters")
}

/// *
/// * Contrato atribuído a um jogador
model Contract {
  id                        String          @id @default(cuid())
  playerId                  String
  teamId                    String
  leagueId                  String
  currentSalary             Float
  originalSalary            Float
  yearsRemaining            Int
  originalYears             Int
  status                    ContractStatus  @default(ACTIVE)
  acquisitionType           AcquisitionType
  signedSeason              Int
  hasBeenTagged             Boolean         @default(false)
  hasBeenExtended           Boolean         @default(false)
  hasFourthYearOption       Boolean         @default(false)
  fourthYearOptionActivated Boolean         @default(false)
  createdAt                 String          @default("")
  updatedAt                 String          @default("")
  league                    League          @relation(fields: [leagueId], references: [id], onDelete: Cascade)
  player                    Player          @relation(fields: [playerId], references: [id])
  team                      Team            @relation(fields: [teamId], references: [id])
  deadMoney                 DeadMoney[]

  @@map("contracts")
}

/// *
/// * Registro de dead money para jogadores cortados
model DeadMoney {
  id         String    @id @default(cuid())
  teamId     String
  playerId   String
  contractId String?
  amount     Float
  year       Int
  reason     String?
  createdAt  DateTime  @default(now())
  updatedAt  DateTime  @updatedAt
  contract   Contract? @relation(fields: [contractId], references: [id])
  player     Player    @relation(fields: [playerId], references: [id])
  team       Team      @relation(fields: [teamId], references: [id], onDelete: Cascade)

  @@map("dead_money")
}

/// *
/// * Tipos de perfil de usuário
enum UserRole {
  COMMISSIONER
  USER
}

/// *
/// * Status da liga
enum LeagueStatus {
  ACTIVE
  OFFSEASON
  ARCHIVED
}

/// *
/// * Status possíveis de um contrato
enum ContractStatus {
  ACTIVE
  EXPIRED
  TAGGED
  EXTENDED
  CUT
}

/// *
/// * Forma de aquisição de um jogador
enum AcquisitionType {
  AUCTION
  FAAB
  ROOKIE_DRAFT
  TRADE
  UNDISPUTED
}
